{"version":3,"sources":["theme/overrides.ts","theme/theme.ts","components/NavigationItem/NavigationItem.tsx","components/Navigation/containers/Root.tsx","components/Navigation/Navigation.tsx","routing/paths.ts","components/Header/containers/Root.tsx","components/Header/Header.tsx","components/Soon/Soon.tsx","pages/HomePage/HomePage.tsx","pages/AboutMePage/AboutMePage.tsx","pages/MyWorkPage/MyWorkPage.tsx","pages/CVPage/CVPage.tsx","modules/analytics/setupAnalytics.ts","components/Layout/containers/TransitionGroupBox.tsx","components/Layout/containers/Content.tsx","components/Layout/containers/Root.tsx","components/Layout/Layout.tsx","App.tsx","serviceWorker.ts","index.tsx","assets/background.jpg","assets/smallBackground.svg"],"names":["overrides","colors","background","sidebar","page","content","valeyellow","fonts","body","heading","theme","merge","baseTheme","NavigationItem","label","to","href","isExternal","useMemo","Box","as","marginRight","target","rel","Root","children","Flex","listStyleType","justifyContent","padding","textTransform","fontFamily","Navigation","position","width","PseudoBox","smallBackground","backgroundSize","height","_before","display","Header","Soon","alignItems","Text","fontSize","color","HomePage","AboutMePage","MyWorkPage","CVPage","stripHash","hash","replace","setupAnalytics","history","ReactGA","initialize","process","pageview","window","location","search","listen","TransitionGroupBox","Content","top","TransitionGroup","component","CSSTransition","classNames","key","pathname","timeout","backgroundColor","createBrowserHistory","Layout","basename","render","exact","path","App","ThemeProvider","CSSReset","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.ed0bd9f3.chunk.js","sourcesContent":["import { ITheme } from '@chakra-ui/core';\nimport { DeepPartial } from 'utility-types';\n\ntype MyTheme = ITheme & {\n  colors: {\n    background: {\n      content: string;\n      page: string;\n      sidebar: string;\n    };\n    valeyellow: string;\n  };\n}\n\nconst overrides: DeepPartial<MyTheme> = {\n  colors: {\n    background: {\n      sidebar: 'rgba(0, 0, 0, .85)',\n      page: 'rgb(28, 28, 28)',\n      content: 'rgba(0, 0, 0, .75)',\n    },\n    valeyellow: '#D4FF00',\n  },\n  fonts: {\n    body: 'Montserrat',\n    heading: 'Muli',\n  },\n};\n\nexport default overrides;\n","import { theme as baseTheme, ITheme } from '@chakra-ui/core';\nimport merge from 'lodash/merge';\n\nimport overrides from './overrides';\n\nconst theme: ITheme = merge(baseTheme, overrides);\n\nexport default theme;\n","import React, { FC, useMemo } from 'react';\nimport { Box } from '@chakra-ui/core';\nimport { NavLink } from 'react-router-dom';\n\nexport type NavigationItemProps = {\n  to?: string;\n  href?: string;\n  label: string;\n}\n\nconst NavigationItem: FC<NavigationItemProps> = ({ label, to, href }) => {\n  const isExternal = useMemo(() => href && !to, [href, to]);\n\n  return (\n    <Box as=\"li\" marginRight={5}>\n      {isExternal ? (\n        <a href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n          {label}\n        </a>\n      ) : (\n        <NavLink to={to ?? href ?? '#'}>\n          {label}\n        </NavLink>\n      )}\n    </Box>\n  );\n};\n\nexport default NavigationItem;\n","import React, { FC } from 'react';\nimport { Flex } from '@chakra-ui/core';\n\nconst Root: FC = ({ children }) => (\n  <Flex\n    as=\"ul\"\n    listStyleType=\"none\"\n    justifyContent=\"center\"\n    padding=\"4rem 0\"\n    textTransform=\"lowercase\"\n    fontFamily=\"heading\"\n  >\n    {children}\n  </Flex>\n);\n\nexport default Root;\n","import React, { FC } from 'react';\n\nimport * as Paths from '../../routing/paths';\nimport NavigationItem from '../NavigationItem';\n\nimport Root from './containers/Root';\n\nconst Navigation: FC = () => (\n  <Root>\n    <NavigationItem label=\"Home\" to={Paths.HOME} />\n    <NavigationItem label=\"About me\" to={Paths.ABOUT_ME} />\n    <NavigationItem label=\"My work\" to={Paths.MY_WORK} />\n    <NavigationItem label=\"CV\" to={Paths.CV} />\n  </Root>\n);\n\nexport default Navigation;\n","export const HOME = '/';\nexport const ABOUT_ME = '/about-me';\nexport const MY_WORK = '/my-work';\nexport const CV = '/cv';\n","import React, { FC } from 'react';\nimport { PseudoBox, PseudoBoxProps, Flex } from '@chakra-ui/core';\n\nimport background from '../../../assets/background.jpg';\nimport smallBackground from '../../../assets/smallBackground.svg';\n\nconst Root: FC = ({ children }) => (\n  <>\n    <Flex\n      as=\"nav\"\n      justifyContent=\"center\"\n      position=\"absolute\"\n      width=\"100%\"\n    >\n      {children}\n    </Flex>\n    <PseudoBox\n      background={`url(${background}), url(${smallBackground}) center;`}\n      backgroundSize=\"cover\"\n      height=\"20rem\"\n      _before={{\n        content: '\"\"',\n        display: 'flex',\n        height: '100%',\n        background: 'linear-gradient(180deg, rgba(28,28,28,0) 0%, rgba(28,28,28,.5) 40%, rgba(28,28,28,1) 80%);',\n      } as PseudoBoxProps}\n    />\n  </>\n);\n\nexport default Root;\n","import React, { FC } from 'react';\n\nimport Navigation from '../Navigation';\n\nimport Root from './containers/Root';\n\nconst Header: FC = () => (\n  <Root>\n    <Navigation />\n  </Root>\n);\n\nexport default Header;\n","import React, { FC } from 'react';\nimport { Flex, Text } from '@chakra-ui/core';\n\nconst Soon: FC = () => (\n  <Flex\n    alignItems=\"center\"\n    justifyContent=\"center\"\n  >\n    <Text fontSize=\"2.46rem\">\n      <span>Soon</span>\n      <Text as=\"span\" color=\"valeyellow\">.</Text>\n    </Text>\n  </Flex>\n);\n\nexport default Soon;\n","import React, { FC } from 'react';\n\nimport Soon from '../../components/Soon';\n\nconst HomePage: FC = () => (\n  <Soon />\n);\n\nexport default HomePage;\n","import React, { FC } from 'react';\n\nimport Soon from '../../components/Soon';\n\nconst AboutMePage: FC = () => (\n  <Soon />\n);\n\nexport default AboutMePage;\n","import React, { FC } from 'react';\n\nimport Soon from '../../components/Soon';\n\nconst MyWorkPage: FC = () => (\n  <Soon />\n);\n\nexport default MyWorkPage;\n","import React, { FC } from 'react';\n\nimport Soon from '../../components/Soon';\n\nconst CVPage: FC = () => (\n  <Soon />\n);\n\nexport default CVPage;\n","import { History } from 'history';\nimport ReactGA from 'react-ga';\n\nconst stripHash = (hash: string): string => hash.replace('#', '');\n\nconst setupAnalytics = (history: History): void => {\n  if (process.env.NODE_ENV === 'production') {\n    ReactGA.initialize(process.env.REACT_APP_GA_TRACKING_TOKEN ?? '');\n    ReactGA.pageview(stripHash(window.location.hash) + window.location.search);\n\n    history.listen((location) => {\n      ReactGA.pageview(stripHash(location.hash) + location.search);\n    });\n  }\n};\n\nexport default setupAnalytics;\n","import React, { FC } from 'react';\nimport { Box } from '@chakra-ui/core';\n\nconst TransitionGroupBox: FC = ({ children }) => (\n  <Box width=\"100%\" position=\"relative\">\n    {children}\n  </Box>\n);\n\nexport default TransitionGroupBox;\n","import React, { FC } from 'react';\nimport * as History from 'history';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { Box } from '@chakra-ui/core';\n\nimport TransitionGroupBox from './TransitionGroupBox';\n\ntype Content = {\n  location: History.Location;\n}\n\nconst Content: FC<Content> = ({ location, children }) => (\n  <Box as=\"main\" height=\"100%\" position=\"relative\" top=\"-4rem\">\n    <TransitionGroup component={TransitionGroupBox}>\n      <CSSTransition\n        classNames=\"fade\"\n        key={location.pathname}\n        timeout={335}\n      >\n        {children}\n      </CSSTransition>\n    </TransitionGroup>\n  </Box>\n);\n\nexport default Content;\n","import React, { FC } from 'react';\nimport { Box } from '@chakra-ui/core';\n\nconst Root: FC = ({ children }) => (\n  <Box color=\"white\" backgroundColor=\"background.page\">\n    {children}\n  </Box>\n);\n\nexport default Root;\n","import React, { FC, ReactNode } from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\n\nimport Header from '../Header';\nimport HomePage from '../../pages/HomePage';\nimport * as Paths from '../../routing/paths';\nimport './Layout.scss';\nimport AboutMePage from '../../pages/AboutMePage';\nimport MyWorkPage from '../../pages/MyWorkPage';\nimport CVPage from '../../pages/CVPage';\nimport setupAnalytics from '../../modules/analytics';\n\nimport Content from './containers/Content';\nimport Root from './containers/Root';\n\nconst history = createBrowserHistory();\n\nsetupAnalytics(history);\n\nconst Layout: FC = () => (\n  <Root>\n    <Router basename={process.env.PUBLIC_URL}>\n      <Header />\n      <Route render={(({ location }): ReactNode => (\n        <Content location={location}>\n          <Switch location={location}>\n            <Route exact path={Paths.ABOUT_ME}>\n              <AboutMePage />\n            </Route>\n            <Route exact path={Paths.MY_WORK}>\n              <MyWorkPage />\n            </Route>\n            <Route exact path={Paths.CV}>\n              <CVPage />\n            </Route>\n            <Route exact path={Paths.HOME}>\n              <HomePage />\n            </Route>\n            <Route path=\"*\">\n              <div>Yikes! Page not found</div>\n            </Route>\n          </Switch>\n        </Content>\n      ))}\n      />\n    </Router>\n  </Root>\n);\n\nexport default Layout;\n","import React from 'react';\nimport { CSSReset, ThemeProvider } from '@chakra-ui/core';\n\nimport theme from './theme';\nimport Layout from './components/Layout';\n\nconst App: React.FC = () => (\n  <ThemeProvider theme={theme}>\n    <CSSReset />\n    <Layout />\n  </ThemeProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/background.65d4a2fc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/smallBackground.cc2a62ec.svg\";"],"sourceRoot":""}